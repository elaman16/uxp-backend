# DataSource settings: set here your own configurations for the database 
# connection. In this example we have "netgloo_blog" as database name and 
# "root" as username and password.
spring.datasource.driver-class-name = com.mysql.jdbc.Driver
spring.datasource.url = ${JDBC_DATABASE_URL}
#spring.datasource.url = jdbc:mysql://localhost:3306/uxpass
#spring.datasource.username = root
#spring.datasource.password = gll219
spring.redis.host = redis://h:p2dbspi4eot21878n1di5und709@ec2-54-227-251-181.compute-1.amazonaws.com:14259
spring.session.store-type=redis
server.session.timeout=5
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1
spring.social.facebook.appId=170871899980871
spring.social.facebook.appSecret=0080be4694afe8bf8f62f395de073a0b
# Show or not log for each sql query
spring.jpa.show-sql = true
multipart.maxFileSize: 20MB
multipart.maxRequestSize: 20MB
# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect